# windows programming
## Game Layout and collision and physics
### 구조 및 기능
#### Base file
``` C++
#include <algorithm>
#include <cmath>

#define Pi	3.14159

typedef unsigned long KgColor24;
#define KG_COLOR_24_RGB(R, G, B)		((unsigned long)(((unsigned char)(R)|((unsigned short)((unsigned char)(G))<<8))|(((unsigned long)(unsigned char)(B))<<16)))

#define KgGetRed(RGB)			((RGB)& 0xff)
#define KgGetGreen(RGB)			((((unsigned short)(RGB)) >> 8)& 0xff)
#define KgGetBlue(RGB)			(((RGB)>>16)& 0xff)

struct CKgPoint {
	int X, Y;

	CKgPoint() {}
	CKgPoint(int x, int y) : X(x), Y(y) {}

	CKgPoint operator+ (CKgPoint p1);
	CKgPoint &operator+= (CKgPoint p1);
};

struct CKgLine {
	CKgPoint Start, End;

	CKgLine() {}
	CKgLine(CKgPoint s, CKgPoint e) : Start(s), End(e) {}
	CKgLine(int sx, int sy, int ex, int ey) : Start(CKgPoint(sx, sy)), End(CKgPoint(ex, ey)) {}
};

struct CKgRect {
	int Left, Top, Right, Bottom;

	CKgRect() : Left(0), Top(0), Right(0), Bottom(0) {}
	CKgRect(int l, int t, int r, int b) : Left(l), Top(t), Right(r), Bottom(b) {}

	bool IsRect();
	int Width();
	int Height();
	CKgPoint Center();
	void Move(int x, int y);
	void Intersect(CKgRect rt);
	void Union(CKgRect rt);
	void Expanded(int e);
};

class CKgVector2D 
{
public:
	double x, y;

	CKgVector2D() : x(0.), y(0.) {}
	CKgVector2D(double xx, double yy) : x(xx), y(yy) {}
	CKgVector2D(CKgPoint pt) : x(pt.X), y(pt.Y) {}

	static double abs(CKgVector2D v);
	void Normalize();
	double Dot(CKgVector2D v1);
	CKgVector2D operator+ (CKgVector2D v);
	CKgVector2D operator- (CKgVector2D v);
	CKgVector2D operator- ();
	//CKgVector2D operator* (double s);
	CKgVector2D &operator+= (CKgVector2D v);
	
};
CKgVector2D operator*(double s, CKgVector2D v);

unsigned char **cmatrix(int nH, int nW);
void free_cmatrix(unsigned char **Image, int nH, int nW);
double **dmatrix(int nH, int nW);
void free_dmatrix(double **Image, int nH, int nW);

void DrawLine(unsigned char **ImageGray, int nW, int nH, int x0, int y0, int x1, int y1, unsigned char Color);
```

전체 프로그램에서 필요한 기초 기능 구현을 위한 코드

- RGB 색 구현
- 점, 선, 사각형, 벡터 기능 구현
- 씬과 레이어를 위한 메모리 할당 및 해제 기능

#### Component file
``` C++
#include <vector>

class CKhuGleComponent
{
public:
	std::vector<CKhuGleComponent*> m_Children;

	CKhuGleComponent *m_Parent;

	CKhuGleComponent();
	virtual ~CKhuGleComponent();

	void AddChild(CKhuGleComponent *pChild);

	virtual void Render() = 0;
};
```
씬, 레이어, 스프라이트를 위한 virtual class 선언

각 객체는 부모와 자식들을 가지고 있으며 객체이 맞게 render 함수 정의

#### Scene file
``` C++
class CKhuGleScene : public CKhuGleComponent
{
public:
	bool m_bInit;
	int m_nW, m_nH;

	unsigned char **m_ImageR, **m_ImageG, **m_ImageB;
	KgColor24 m_bgColor;

	CKhuGleScene(int nW, int nH, KgColor24 bgColor);
	~CKhuGleScene();

	void SetBackgroundImage(int nW, int nH, KgColor24 bgColor);
	void ResetBackgroundImage();
	void SetBgColor(KgColor24 bgColor);

	virtual void Render();
};
```

Scece class 정의(component class 상속)

- 씬의 메모리 할당 여부를 판단하는 변수, 씬의 폭과 너비 변수, 색 설정 변수
- 배경 그리고, 배경 지우기, 색 설정과 render 함수 선언
- setbackgroundimage는 폭과 너비와 색을 받아, 폭과 너비 만큼 R, G, B 3개의 2차원 배열을 만들고, 받은 색을 통해 3개의 2차원 배열 각각에 값 대입
- render함수는 먼저 색을 통해 배경을 그리고, 자신의 자식들인 레이어들을 차례로 불러와 레이어 render를 호출, 레이어에 그린 것을 위에 덮어서 그리는 것으로 구현

#### Layer file
``` C++
class CKhuGleLayer : public CKhuGleComponent
{
public:
	bool m_bInit;
	int m_nW, m_nH;
	CKgPoint m_ptPos;

	unsigned char **m_ImageR, **m_ImageG, **m_ImageB;
	unsigned char **m_ImageBgR, **m_ImageBgG, **m_ImageBgB;
	KgColor24 m_bgColor;

	CKhuGleLayer(int nW, int nH, KgColor24 bgColor, CKgPoint ptPos = CKgPoint(0, 0));
	~CKhuGleLayer();

	void SetBackgroundImage(int nW, int nH, KgColor24 bgColor);
	void ResetBackgroundImage();
	void SetBgColor(KgColor24 bgColor);

	virtual void Render();
};
```
layer class 정의(component class 상속)
기본적인 구성은 씬과 동일

-레이어에서는 스프라이트의 변화마다 배경을 새로 그려줘야 할 필요성이 있음, => ImageBeR ,G, B에 원래 배경의 색을 저장, 그릴 대마다 Image R, G, B에 복사해서 그리는 방식으로 구현
-Render함수에서는 R, G, B를 그리고, 자신의 자식으로 있는 스프라이트들을 순서대로 render하도록 구현

#### Sprite file
``` C++
#include "KhuGleBase.h"
#include "KhuGleLayer.h"
#include "KhuGleScene.h"
#include "KhuGleComponent.h"

#define GP_STYPE_LINE			0
#define GP_STYPE_RECT			1
#define GP_STYPE_ELLIPSE		2

#define GP_CTYPE_STATIC			0
#define GP_CTYPE_DYNAMIC		1
#define GP_CTYPE_KINEMATIC		2

class CKhuGleSprite : public CKhuGleComponent
{
public:
	int m_nType;
	int m_nCollisionType;
  
	int m_bCollided;
	CKgLine m_lnLine;
	CKgRect m_rtBoundBox;
	KgColor24 m_fgColor;
	bool m_bFill;
	int m_nWidth;
	int m_nSlice;

	CKgVector2D m_Center, m_Velocity, m_Acceleration;
	double m_Radius;
	double m_Mass;

	CKhuGleSprite() { m_bCollided = false; }
	CKhuGleSprite(int nType, int nCollisionType, CKgLine lnLine, KgColor24 fgColor, bool bFill, int nSliceOrWidth = 100);
	~CKhuGleSprite();

	static void DrawLine(unsigned char **R, unsigned char **G, unsigned char **B, int nW, int nH, int x0, int y0, int x1, int y1, KgColor24 Color24);

	virtual void Render();
	void MoveBy(double OffsetX, double OffsetY);
	void MoveTo(double X, double Y);
	void Move();
};
```
Sprite class 정의(component class 상속)

- sprite마다 type 지정, 선인지 사각형인지, 원인지
- 충돌 물리 type도 지정, static or dynamic or 사용자 지정
- 각 sprite들은 각자의 type 저장, 충돌여부를 포함한 추가 정보 저장
- 스프라이트를 그리는 것은 DrawLine함수 이용(선이면 선 하나, 사각형이면 선 4개, 원이면 설정한 slice개수 만큼 선을 그려서 원으로 보이게끔 구현)
- render함수는 sprite type에 따라 다르게 동작, 각 type에 맞게 그려지도록 구현
- sprite들은 이동이 가능하게끔 설계, move함수들을 구현

#### window file
``` C++
#include <windows.h>
#include "KhuGleBase.h"
#include "KhuGleSprite.h"
#include "KhuGleLayer.h"
#include "KhuGleScene.h"
#include "KhuGleComponent.h"

class CKhuGleWin;
void KhuGleWinInit(CKhuGleWin *pApplication);

class CKhuGleWin
{
public:
	HWND m_hWnd;
	int m_nW, m_nH;

	CKgVector2D m_Gravity;
	CKgVector2D m_AirResistance;

	static CKhuGleWin *m_pWinApplication;

	int m_nDesOffsetX, m_nDesOffsetY;
	int m_nViewW, m_nViewH;

	_int64 m_TimeCountFreq, m_TimeCountStart, m_TimeCountEnd;
	double m_Fps, m_ElapsedTime;

	bool m_bKeyPressed[256];
	bool m_bMousePressed[3];
	int m_MousePosX, m_MousePosY;

	WINDOWPLACEMENT m_wpPrev;

	static LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);
	LRESULT CALLBACK WndProcInstanceMember(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);

	void Fullscreen();

	void GetFps();
	virtual void Update();
	void OnPaint();

	void DrawSceneTextPos(const char *Text, CKgPoint ptPos);
	void ToggleFpsView();

	CKhuGleWin(int nW, int nH);
	virtual ~CKhuGleWin();
	bool m_bViewFps;

	CKhuGleScene *m_pScene;
};
```
실제로 window를 제어하기 위한 class

- window handle, 폭과 너비를 포함해 frame, 시간, 입력된 키, 마우스 위치 등을 저장할 변수 선언
- Fullscreen, GetFps, Update, Onpaint 등의 함수는 실제로 window에 그림을 기르고 정보를 제어하기 위한 함수
- 위에서 정의한 씬, 레이어, 스프라이트들의 함수들을 활용해 실제로 윈도우 위에서 동작을 진행하는 객체

#### main
실제 내가 동작시킬 기능을 구현하는 부분으로 해당 기능은 update함수를 선언해 함수내에서 정의

이번 file에서는 100개의 작은 공과 2개의 큰 공을 만들고, 모든 공은 중력의 영향을 받아 아래로 떨어지며, 큰 공 중 색이 칠해진 공은 사용자가 방향키로 직접 조작하도록 설계

``` C++
//모든 동작에 대한 구현이 이루어진 함수
void CCollision::Update()
{
	//마우스로 클릭하면 마우스의 좌푤를 출력
	if(m_bMousePressed[0]) {
		if(m_nLButtonStatus == 0)		{
			m_LButtonStart = CKgPoint(m_MousePosX, m_MousePosY);
		}
		m_LButtonEnd = CKgPoint(m_MousePosX, m_MousePosY);
		m_nLButtonStatus = 1;
	}
	else {
		if(m_nLButtonStatus == 1) {
			std::cout << m_LButtonStart.X << "," << m_LButtonStart.Y << std::endl;
			std::cout << m_LButtonEnd.X << "," << m_LButtonEnd.Y << std::endl;

			m_nLButtonStatus = 0;
		}
	}

	//키보드 s를 누르면 공1에 대한 속도를 0으로 지정(잠시 멈춤)
	if(m_bKeyPressed['S']) 
	{
		m_pCircle1->m_Velocity = CKgVector2D(0, 0);
	}
	//방향키를 누르면 해당 방향에 맞게 이동하도록 속도를 지정
	if(m_bKeyPressed[VK_LEFT]) m_pCircle1->m_Velocity = CKgVector2D(-500, 0);
	if(m_bKeyPressed[VK_UP]) m_pCircle1->m_Velocity = CKgVector2D(0, -500);
	if(m_bKeyPressed[VK_RIGHT]) m_pCircle1->m_Velocity = CKgVector2D(500, 0);
	if(m_bKeyPressed[VK_DOWN]) m_pCircle1->m_Velocity = CKgVector2D(0, 500);

	//실질적으로 공에대한 처리가 이루어 지는 곳
	//씬에 있는 레이어들을 가져옴
	for(auto &Layer : m_pScene->m_Children)
	{
		//레이어들에 있는 스프라이트들을 가져옴
		for(auto &Sprite : Layer->m_Children)
		{
			//스프라이트를 순차적으로 ball에 저장
			CKhuGleSprite *Ball = (CKhuGleSprite *)Sprite;

			//일단 충돌은 false로 설정
			Ball->m_bCollided = false;

			//ball이 사각형이거나, 원이 아니거나, 다이나믹이 아니면 처리하지 않게 continue하는 코드
			//즉 현재는 ELLIPSE type이면서 DYNAMIC인 것들만 처리가 이루어짐
			if(Ball->m_nType == GP_STYPE_RECT) continue;

			if(Ball->m_nType != GP_STYPE_ELLIPSE) continue;
			if(Ball->m_nCollisionType != GP_CTYPE_DYNAMIC) continue;

			//아래는 공의 속도에 관한 처리
			//속도: 단위 시간당 이동거리(dx/dt), 가속도: 단위 시간당 속도의 변화량(dv/dt)

			//가속도 계산(가속도는 중력과 공기저항을 계산해서 가속도 측정)
			Ball->m_Acceleration.x = m_Gravity.x - Ball->m_Velocity.x * m_AirResistance.x;			
			Ball->m_Acceleration.y = m_Gravity.y - Ball->m_Velocity.y * m_AirResistance.y;

			//가속도를 이용해 속도 계산(다음 속도 = 현재 속도 + 가속도 이므로 현재 속도에 가속도 * 시간 만큼 더함) => 경과된 시간만큼의 속도 변화를 속도에 더해 현재 속도 계산
			Ball->m_Velocity.x += Ball->m_Acceleration.x * m_ElapsedTime;
			Ball->m_Velocity.y += Ball->m_Acceleration.y * m_ElapsedTime;

			//계산한 속도로 실제 이동에 대한 처리(x = v * t이므로 속도 * 시간만큼 공 이동)
			Ball->MoveBy(Ball->m_Velocity.x*m_ElapsedTime, Ball->m_Velocity.y*m_ElapsedTime);

			//공이 화면에서 화면 아래로 가면 위로 나오고, 위로 가면 아래로 나오고, 왼쪽으로 가면 오른쪽으로, 오른쪽으로 가면 왼쪽으로 이동시켜주는 함수
			//공의 center가 화면을 벗어나면 반대 방향에서 나올 수 있도록 공을 이동시키는 것
			if(Ball->m_Center.x < 0) Ball->MoveTo(m_nW+Ball->m_Center.x, Ball->m_Center.y);
			if(Ball->m_Center.x > m_nW) Ball->MoveTo(Ball->m_Center.x-m_nW, Ball->m_Center.y);
			if(Ball->m_Center.y < 0) Ball->MoveTo(Ball->m_Center.x, m_nH+Ball->m_Center.y);
			if(Ball->m_Center.y > m_nH) Ball->MoveTo(Ball->m_Center.x, Ball->m_Center.y-m_nH);

			//속도의 절댓값이 0.01아래면 그냥 0으로 속도를 맞추는 코드음
			//=> 속도의 절대값이 너무 작으면 그냥 속도를 0으로 설정
			if(CKgVector2D::abs(Ball->m_Velocity) < 0.01)
				Ball->m_Velocity = CKgVector2D(0, 0);
		}

		//충돌하는 공의 pair를 저장할 vector
		//이 vector는 스프라이트 객체 2개의 pair를 원소로 가지는 벡터 => CollisionPairs[0]에는 현재 충돌하는 공 2개가 저장 되는 것
		std::vector<std::pair<CKhuGleSprite*, CKhuGleSprite*>> CollisionPairs;

		//공의 충돌을 감지하는 코드
		//레이어에 있는 공 하나를 가져옴
		for(auto &SpriteA : Layer->m_Children)
		{
			CKhuGleSprite *Ball = (CKhuGleSprite *)SpriteA;
			//Ball이 ELLIPSE가 아니면 처리 x
			if(Ball->m_nType != GP_STYPE_ELLIPSE) continue;
			
			//위에서 가져온 공과 충돌이 있는 공을 판단해야 하므로 레이어에 있는 공들을 순차적으로 가져옴
			for(auto &SpriteB : Layer->m_Children)
			{
				CKhuGleSprite *Target = (CKhuGleSprite *)SpriteB;

				//2중 반복문에서 ball과 target이 자기자신으로 같아 질 수 있으니 그런 경우는 그냥 넘어가도록 설계
				if(Ball == Target) continue;

				//target이 ELLIPSE인 경우에만 처리하도록 설정
				if(((CKhuGleSprite *)Target)->m_nType == GP_STYPE_ELLIPSE) 
				{
					//충돌을 감지하는 방법은 두 공의 센터끼리의 벡터 PosVec을 저장하고 PosVec이 두 공의 반지름의 합보다 작으면 충돌했다고 판단(PosVec은 target 공 중심에서 ball 공 중심방향의 벡터)
					//즉 두 공의 중심사이의 거리가 두 공의 반지름 합보다 같거나 작으면 맞닿아 있다고 판단
					//0이 아니라 0이하로 판단하는 이유는 컴퓨터에서 정확히 0인 지점을 측정할 수 없음, 컴퓨터는 이산적인 시간마다 끊어서 처리하기 때문에 0 이하가 될 때 측정하게 될 가능성이 매우 큼
					CKgVector2D PosVec = Ball->m_Center - Target->m_Center;
					double Overlapped = CKgVector2D::abs(PosVec) - Ball->m_Radius - Target->m_Radius;
					//Overlapped이 0이하라는 의미는 충돌했다는 의미
					if(Overlapped <= 0)
					{
						//충돌했으니 두 공의 pair를 vector에 추가
						CollisionPairs.push_back({Ball, Target});
						
						//PosVec값이 0인 경우는 완전히 겹쳐있는 경우
						//이 경우는 공이 처음 생성될 때 동일한 위치에 생성되므로 이 때 일 수도 있고, 아니면 공이 완전히 겹쳐있는 상황이 생기면 이렇게 될 수도 있음
						//이런 경우는 원만한 충돌 처리를 위해 랜드값을 줘서 -1~1 사이의 값만큼 이동시킴
						if(CKgVector2D::abs(PosVec) == 0)
						{
							if(Ball->m_nCollisionType != GP_CTYPE_STATIC)
								Ball->MoveBy(rand()%3-1, rand()%3-1);
							if(Target->m_nCollisionType != GP_CTYPE_STATIC)
								Target->MoveBy(rand()%3-1, rand()%3-1);
						}
						//실질적으로 충돌되었을 경우의 처리
						//공의 충돌이 overlapped이 0인 상황은 거의 없음, 따라서 컴퓨터가 공의 충돌을 감지했을 경우는 공 2개가 약간 겹쳐있을 상황일 것
						//이 때 충돌에 대한 원만한 처리를 위해서는 겹쳐있는 공 2개를 맞닿아 있는 위치로 이동시켜줄 필요가 있음
						//즉 컴퓨터가 공 2개가 겹쳐있을 때 충돌을 감지하므로, 겹쳐있는 공 2개를 맞닿아 있는 상태로 공을 살짝 이동시킬 필요가 있음
						else
						{
							//우리가 선언한 PosVec는 target에서 ball로의 벡터 => 즉 ball은 PosVec의 방향그대로 이동시키면 되고, target은 PosVec의 반대방향으로 이동시키면 됨\
							//ball이 static이 아니면, 즉 이동할 수 있는 상태라면
							if(Ball->m_nCollisionType != GP_CTYPE_STATIC)
							{
								//target이 static이면 ball만 이동할 수 있다는 의미 => 즉 overlapped된 크기만큼 ball을 이동시켜야 됨
								if(Target->m_nCollisionType == GP_CTYPE_STATIC)
									Ball->MoveBy(-PosVec.x*Overlapped/CKgVector2D::abs(PosVec), -PosVec.y*Overlapped/CKgVector2D::abs(PosVec));
								//ball과 target 둘다 이동 가능하면 둘다 overlapped된 크기의 절반만큼 이동시키면 됨(target은 아래 조건문에서 이동시킬 것임)
								else
									Ball->MoveBy(-PosVec.x*Overlapped/CKgVector2D::abs(PosVec)*0.5, -PosVec.y*Overlapped/CKgVector2D::abs(PosVec)*0.5);
							}
							//target은 ball과 반대방향으로 이동시키면 됨
							if(Target->m_nCollisionType != GP_CTYPE_STATIC)
							{
								if(Ball->m_nCollisionType == GP_CTYPE_STATIC)
									Target->MoveBy(PosVec.x*Overlapped/CKgVector2D::abs(PosVec), PosVec.y*Overlapped/CKgVector2D::abs(PosVec));
								else
									Target->MoveBy(PosVec.x*Overlapped/CKgVector2D::abs(PosVec)*0.5, PosVec.y*Overlapped/CKgVector2D::abs(PosVec)*0.5);
							}
						}
						//충돌시 색상을 노란색으로 바꿔줘야 하니 충돌되었다는 것을 true로 바꿈
						Ball->m_bCollided = true;
						Target->m_bCollided = true;
					}
				}
			}
		}

		//충돌된 공들의 pair를 가져와서 반복문으로 모두 처리
		for(auto &Pair : CollisionPairs)
		{
			//공을 가져옴
			CKhuGleSprite *BallA = Pair.first;
			CKhuGleSprite *BallB = Pair.second;

			//PosVec는 B에서 A로 향하는 벡터
			CKgVector2D PosVec = BallB->m_Center - BallA->m_Center;
			double Distance = CKgVector2D::abs(PosVec);
			//Distance가 0이면, 혹은 컴퓨터가 측정할 수 없을 만큼 너무 작으면 임의의 작은 값을 설정해줌(10^-6)
			if(Distance == 0) Distance = 1E-6;
			//Normal벡터는 PosVec의 유닛벡터
			CKgVector2D Normal = (1./Distance)*PosVec;

			double kx = (BallA->m_Velocity.x - BallB->m_Velocity.x);
			double ky = (BallA->m_Velocity.y - BallB->m_Velocity.y);
			double p = 2.0 * (Normal.x * kx + Normal.y * ky) / (BallA->m_Mass + BallB->m_Mass);

			BallA->m_Velocity.x = BallA->m_Velocity.x - p * BallB->m_Mass * Normal.x;
			BallA->m_Velocity.y = BallA->m_Velocity.y - p * BallB->m_Mass * Normal.y;

			BallB->m_Velocity.x = BallB->m_Velocity.x + p * BallA->m_Mass * Normal.x;
			BallB->m_Velocity.y = BallB->m_Velocity.y + p * BallA->m_Mass * Normal.y;
		}
	}
	
	//렌더링 하고, 출력
	m_pScene->Render();
	DrawSceneTextPos("Collision and Physics", CKgPoint(0, 0));

	//base class의 update를 호출
	//base class의 기본적인 update 동작
	//즉 이 클래스에서 정의한 update는 추가적으로 우리가 처리해야할 동작을 정의해놓은 것이고, 다 했으면 base class의 update를 호출해 기본적인 update 동작을 진행
	CKhuGleWin::Update();
}
```
각 코드의 설명은 주석을 이용
